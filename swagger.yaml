openapi: 3.0.3
info:
  title: Onboarding - OpenAPI 3.0
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://students.swagger.io/api/v3
tags:
  - name: students
    description: Everything about students
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /students:
    get:
      tags:
        - students
      summary: Get a list of students
      description: Retrieve a list of all students
      operationId: getStudentsList
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Students"
    put:
      tags:
        - students
      summary: Update an existing student
      description: Update an existing student by Id
      operationId: updateStudent
      requestBody:
        description: Update an existing student
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Students"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Students"
    post:
      tags:
        - students
      summary: Add a new student
      description: Add a new student
      operationId: addStudent
      requestBody:
        description: Create a new student
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Students"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Students"
  /students/{studentId}:
    delete:
      tags:
        - students
      summary: Delete a student
      description: Delete a student by Id
      operationId: deleteStudent
      parameters:
        - name: studentId
          in: path
          required: true
          description: ID of the student to delete
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Student deleted successfully
  /teachers:
    get:
      tags:
        - teachers
      summary: Get a list of teachers
      description: Retrieve a list of all teachers
      operationId: getTeachersList
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Teacher"
    put:
      tags:
        - teachers
      summary: Update an existing teacher
      description: Update an existing teacher by Id
      operationId: updateTeacher
      requestBody:
        description: Update an existing teacher
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Teacher"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teacher"
    post:
      tags:
        - teachers
      summary: Add a new teacher
      description: Add a new teacher
      operationId: addTeacher
      requestBody:
        description: Create a new teacher
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Teacher"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teacher"
  /teachers/{teacherId}:
    delete:
      tags:
        - teachers
      summary: Delete a teacher
      description: Delete a teacher by Id
      operationId: deleteTeacher
      parameters:
        - name: teacherId
          in: path
          required: true
          description: ID of the teacher to delete
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Teacher deleted successfully
components:
  schemas:
    Students:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: "Radama"
        birthdate:
          type: string
          example: "2005-01-03"
    Teacher:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 20
        name:
          type: string
          example: "John Doe"
        subject:
          type: string
          example: "Computer Science"
